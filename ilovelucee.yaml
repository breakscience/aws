AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Lucee server on EKS, RDS SQL Server, S3 bucket, and associated security groups and roles, including index.cfm in S3 bucket"

Parameters:
  DBUsername:
    Description: "Username for RDS SQL Server"
    Type: String
  DBPassword:
    Description: "Password for RDS SQL Server"
    Type: String
    NoEcho: true
  VPCName:
    Description: "Name of the VPC"
    Type: String
    Default: "lucee-vpc"
  ClusterName:
    Description: "EKS Cluster name"
    Type: String
    Default: "lucee-cluster"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route table for the public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnets for EKS and RDS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-west-2a"
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-west-2b"
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS SQL Server"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # EKS Control Plane Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # Security Group for EKS Control Plane
  EKSControlPlaneSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EKS control plane"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Security Group for EKS Worker Nodes
  EKSWorkerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EKS worker nodes"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 1025
          ToPort: 65535
          CidrIp: 10.0.0.0/16  # Allow worker nodes to communicate within the VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0 # Allow all outbound traffic

  # Security Group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          CidrIp: 10.0.0.0/16  # Allow access from the VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0 # Allow all outbound traffic

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref EKSControlPlaneSG

  # EKS Node Group (Worker Nodes)
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2
      RemoteAccess:
        Ec2SshKey: "your-ec2-key" # Make sure to replace this with your actual EC2 key pair name
      InstanceTypes: ["t3.medium"]
      AmiType: AL2_x86_64

  # IAM Role for EKS Worker Nodes
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  # RDS SQL Server Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.m5.large
      Engine: sqlserver-se
      LicenseModel: license-included
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 100
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MultiAZ: true
      BackupRetentionPeriod: 7

  # S3 Bucket for Lucee home directory
  LuceeS3Bucket:
    Type: AWS::S3::Bucket

  # Lambda function to upload index.cfm to S3
  LambdaUploadIndexFileFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          def handler(event, context):
              try:
                  print("Received event: " + json.dumps(event, indent=2))

                  bucket_name = event['ResourceProperties']['bucket']
                  s3 = boto3.client('s3')
                  response = s3.put_object(Bucket=bucket_name, Key='index.cfm', Body='Hello World')

                  # Send success response back to CloudFormation
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "File uploaded successfully"})
              
              except Exception as e:
                  print(f"Error uploading file: {e}")
                  # Send failure response back to CloudFormation
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": str(e)})
      Runtime: python3.8
      Timeout: 60

  # Custom resource to upload index.cfm file to S3 bucket
  UploadIndexFileCustomResource:
    Type: Custom::S3Object
    Properties:
      ServiceToken: !GetAtt LambdaUploadIndexFileFunction.Arn
      bucket: !Ref LuceeS3Bucket

  # Lambda execution role for uploading files to S3
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${LuceeS3Bucket}/*"

  # Lambda function to apply Kubernetes manifests (for deploying Lucee)
  EKSKubernetesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import time
          import cfnresponse
          from kubernetes import client, config

          def handler(event, context):
              try:
                  print("Received event: " + json.dumps(event, indent=2))
                  manifest = event['ResourceProperties']['Manifest']
                  service_name = manifest['metadata']['name']
                  namespace = manifest.get('metadata', {}).get('namespace', 'default')

                  # Load Kubernetes configuration
                  config.load_kube_config()

                  v1 = client.CoreV1Api()

                  if event['RequestType'] == 'Create':
                      print(f"Applying Kubernetes Service: {service_name}")

                      # Wait for the LoadBalancer to be provisioned
                      for i in range(0, 30):  # Retry for ~5 minutes
                          time.sleep(10)
                          print(f"Checking LoadBalancer status... attempt {i+1}")
                          service = v1.read_namespaced_service(service_name, namespace)
                          if service.status.load_balancer.ingress:
                              lb_hostname = service.status.load_balancer.ingress[0].hostname
                              print(f"LoadBalancer hostname: {lb_hostname}")
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Hostname": lb_hostname})
                              return
                      
                      # If we reach here, the LoadBalancer didn't get a hostname in time
                      raise Exception("LoadBalancer hostname not available after 5 minutes")

                  elif event['RequestType'] == 'Delete':
                      print(f"Deleting Kubernetes Service: {service_name}")
                      v1.delete_namespaced_service(service_name, namespace)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {"Message": "Service deleted"})

              except Exception as e:
                  print(f"Error managing Kubernetes Service: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": str(e)})

      Runtime: python3.8
      Timeout: 300  # Increased timeout to allow for waiting on the LoadBalancer

  # Kubernetes deployment manifest as a Custom Resource for Lucee server
  EKSManifest:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSKubernetesFunction.Arn
      Manifest:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: lucee-server
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: lucee
          template:
            metadata:
              labels:
                app: lucee
            spec:
              containers:
              - name: lucee
                image: lucee/lucee:latest
                ports:
                - containerPort: 8080
                volumeMounts:
                  - name: s3-volume
                    mountPath: /var/www/html # Mount the S3 bucket as the home directory
              volumes:
                - name: s3-volume
                  hostPath:
                    path: /mnt/s3 # Replace with appropriate S3 mount path

  # Kubernetes Service for Lucee server to expose via LoadBalancer
  EKSService:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSKubernetesFunction.Arn
      Manifest:
        apiVersion: v1
        kind: Service
        metadata:
          name: lucee-service
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8080
          selector:
            app: lucee

Outputs:
  EKSClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref EKSCluster

  RDSInstanceEndpoint:
    Description: "RDS SQL Server endpoint"
    Value: !GetAtt RDSInstance.Endpoint.Address

  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref LuceeS3Bucket

  LuceeServiceURL:
    Description: "Lucee Server URL"
    Value: !GetAtt EKSService.Status.LoadBalancer.Ingress[0].Hostname
