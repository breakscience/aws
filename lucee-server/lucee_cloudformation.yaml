AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy Lucee server on EKS, RDS SQL Server, S3 bucket, and associated security groups and roles"

Parameters:
  DBUsername:
    Description: "Username for RDS SQL Server"
    Type: String
  DBPassword:
    Description: "Password for RDS SQL Server"
    Type: String
    NoEcho: true
  VPCName:
    Description: "Name of the VPC"
    Type: String
    Default: "lucee-vpc"
  ClusterName:
    Description: "EKS Cluster name"
    Type: String
    Default: "lucee-cluster"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets for EKS and RDS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-west-2a"
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-west-2b"
      Tags:
        - Key: Name
          Value: PublicSubnet2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS SQL Server"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup

  # EKS Node Group (Worker Nodes)
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref EKSNodeRole
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2

  # Security Groups
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP, HTTPS, and SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # IAM Role for EKS Worker Nodes
  EKSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EKSNodePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - s3:GetObject
                  - rds:Describe*
                Resource: "*"

  # RDS SQL Server Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.m5.large
      Engine: sqlserver-se
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 100
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref EKSSecurityGroup
      MultiAZ: true
      BackupRetentionPeriod: 7

  # S3 Bucket
  LuceeS3Bucket:
    Type: AWS::S3::Bucket

  # Kubernetes manifest as a Custom Resource
  EKSManifest:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSKubernetesFunction.Arn
      Manifest:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: lucee-server
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: lucee
          template:
            metadata:
              labels:
                app: lucee
            spec:
              containers:
              - name: lucee
                image: lucee/lucee:latest
                ports:
                - containerPort: 8080

  # Kubernetes Service for LoadBalancer
  EKSService:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSKubernetesFunction.Arn
      Manifest:
        apiVersion: v1
        kind: Service
        metadata:
          name: lucee-service
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 8080
          selector:
            app: lucee

  # Lambda function to apply Kubernetes manifests
  EKSKubernetesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import urllib.request

          def handler(event, context):
              print("Apply Kubernetes Manifest")
              # Add code to interact with Kubernetes
      Runtime: python3.8
      Timeout: 60

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaKubernetesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: eks:Describe*
                Resource: "*"

Outputs:
  EKSClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref EKSCluster

  RDSInstanceEndpoint:
    Description: "RDS SQL Server endpoint"
    Value: !GetAtt RDSInstance.Endpoint.Address

  S3BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref LuceeS3Bucket

  LuceeServiceURL:
    Description: "Lucee Server URL"
    Value: !GetAtt EKSService.Status.LoadBalancer.Ingress[0].Hostname